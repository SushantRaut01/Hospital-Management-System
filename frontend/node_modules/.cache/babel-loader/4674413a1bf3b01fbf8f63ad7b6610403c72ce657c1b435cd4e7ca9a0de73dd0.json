{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/Hospital-Management-System/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// DoctorDashboard.jsx\nimport React,{useState,useEffect}from\"react\";import Sidebar from\"./components/Sidebar\";import Navbar from\"./components/Navbar\";import PatientList from\"./components/PatientList\";import PatientDetails from\"./components/PatientDetails\";import MedicineSuggestions from\"./components/MedicineSuggestions\";import{apiFetch}from\"../../utils/api\";// ✅ Import your working helper\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DoctorDashboard=()=>{const[patients,setPatients]=useState([]);const[selectedPatient,setSelectedPatient]=useState(null);const[prescriptions,setPrescriptions]=useState({});// ✅ Fetch patients list from the API\nconst fetchPatients=async()=>{try{const data=await apiFetch(\"/api/doctor/incoming-patients/\");setPatients(data);}catch(err){console.error(\"Fetch error:\",err);}};// ✅ Poll every 3 seconds\nuseEffect(()=>{fetchPatients();const interval=setInterval(fetchPatients,3000);return()=>clearInterval(interval);},[]);// ✅ Submit prescription form\nconst handleFormSubmit=(e,patientId)=>{e.preventDefault();const form=e.target;const med=form.med.value.trim();const dose=form.dose.value.trim();const freq=form.freq.value.trim();const time=form.time.value.trim();const remarks=form.remarks.value.trim();if(med&&dose&&freq&&time){const newPrescription=\"\\u2022 \".concat(med,\" \\u2014 \").concat(dose,\", \").concat(freq,\", \").concat(time).concat(remarks?\" (\"+remarks+\")\":\"\");setPrescriptions(prev=>_objectSpread(_objectSpread({},prev),{},{[patientId]:[...(prev[patientId]||[]),newPrescription]}));form.reset();}};// ✅ Autofill prescription from suggestion\nconst fillPrescription=(med,dose,freq,time)=>{const form=document.querySelector(\"#selectedPatient form\");if(form){form.med.value=med;form.dose.value=dose;form.freq.value=freq;form.time.value=time;}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex h-screen bg-gray-100 font-sans\",children:[/*#__PURE__*/_jsx(Sidebar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 flex flex-col overflow-hidden\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"main\",{className:\"flex flex-1 overflow-hidden\",children:[/*#__PURE__*/_jsx(PatientList,{patients:patients,setSelectedPatient:setSelectedPatient}),/*#__PURE__*/_jsxs(\"section\",{className:\"flex-1 bg-gray-50 p-6 overflow-y-auto\",id:\"selectedPatient\",children:[/*#__PURE__*/_jsx(PatientDetails,{patient:selectedPatient,onSubmit:handleFormSubmit,prescriptions:prescriptions[selectedPatient===null||selectedPatient===void 0?void 0:selectedPatient.id]||[]}),/*#__PURE__*/_jsx(MedicineSuggestions,{fillPrescription:fillPrescription})]})]})]})]});};export default DoctorDashboard;","map":{"version":3,"names":["React","useState","useEffect","Sidebar","Navbar","PatientList","PatientDetails","MedicineSuggestions","apiFetch","jsx","_jsx","jsxs","_jsxs","DoctorDashboard","patients","setPatients","selectedPatient","setSelectedPatient","prescriptions","setPrescriptions","fetchPatients","data","err","console","error","interval","setInterval","clearInterval","handleFormSubmit","e","patientId","preventDefault","form","target","med","value","trim","dose","freq","time","remarks","newPrescription","concat","prev","_objectSpread","reset","fillPrescription","document","querySelector","className","children","id","patient","onSubmit"],"sources":["/home/ubuntu/Hospital-Management-System/frontend/src/Pages/Doctor/DoctorDashboard.jsx"],"sourcesContent":["// DoctorDashboard.jsx\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Navbar from \"./components/Navbar\";\nimport PatientList from \"./components/PatientList\";\nimport PatientDetails from \"./components/PatientDetails\";\nimport MedicineSuggestions from \"./components/MedicineSuggestions\";\nimport { apiFetch } from \"../../utils/api\";  // ✅ Import your working helper\n\nconst DoctorDashboard = () => {\n  const [patients, setPatients] = useState([]);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [prescriptions, setPrescriptions] = useState({});\n\n  // ✅ Fetch patients list from the API\n  const fetchPatients = async () => {\n    try {\n      const data = await apiFetch(\"/api/doctor/incoming-patients/\");\n      setPatients(data);\n    } catch (err) {\n      console.error(\"Fetch error:\", err);\n    }\n  };\n\n  // ✅ Poll every 3 seconds\n  useEffect(() => {\n    fetchPatients();\n    const interval = setInterval(fetchPatients, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // ✅ Submit prescription form\n  const handleFormSubmit = (e, patientId) => {\n    e.preventDefault();\n    const form = e.target;\n\n    const med = form.med.value.trim();\n    const dose = form.dose.value.trim();\n    const freq = form.freq.value.trim();\n    const time = form.time.value.trim();\n    const remarks = form.remarks.value.trim();\n\n    if (med && dose && freq && time) {\n      const newPrescription = `• ${med} — ${dose}, ${freq}, ${time}${remarks ? \" (\" + remarks + \")\" : \"\"}`;\n      setPrescriptions((prev) => ({\n        ...prev,\n        [patientId]: [...(prev[patientId] || []), newPrescription],\n      }));\n      form.reset();\n    }\n  };\n\n  // ✅ Autofill prescription from suggestion\n  const fillPrescription = (med, dose, freq, time) => {\n    const form = document.querySelector(\"#selectedPatient form\");\n    if (form) {\n      form.med.value = med;\n      form.dose.value = dose;\n      form.freq.value = freq;\n      form.time.value = time;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-100 font-sans\">\n      <Sidebar />\n\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Navbar />\n\n        <main className=\"flex flex-1 overflow-hidden\">\n          <PatientList\n            patients={patients}\n            setSelectedPatient={setSelectedPatient}\n          />\n\n          <section className=\"flex-1 bg-gray-50 p-6 overflow-y-auto\" id=\"selectedPatient\">\n            <PatientDetails\n              patient={selectedPatient}\n              onSubmit={handleFormSubmit}\n              prescriptions={prescriptions[selectedPatient?.id] || []}\n            />\n\n            <MedicineSuggestions fillPrescription={fillPrescription} />\n          </section>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default DoctorDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}