{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/Hospital-Management-System/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const BASE_URL=process.env.REACT_APP_API_URL+process.env.REACT_APP_API_BASE_URL;export const apiFetch=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const response=await fetch(\"\".concat(BASE_URL).concat(endpoint),_objectSpread({headers:{\"Content-Type\":\"application/json\"}},options));if(!response.ok){const error=await response.json();throw new Error(error.detail||\"API Error\");}return response.json();};","map":{"version":3,"names":["BASE_URL","process","env","REACT_APP_API_URL","REACT_APP_API_BASE_URL","apiFetch","endpoint","options","arguments","length","undefined","response","fetch","concat","_objectSpread","headers","ok","error","json","Error","detail"],"sources":["/home/ubuntu/Hospital-Management-System/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = process.env.REACT_APP_API_URL + process.env.REACT_APP_API_BASE_URL;\n\nexport const apiFetch = async (endpoint, options = {}) => {\n  const response = await fetch(`${BASE_URL}${endpoint}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || \"API Error\");\n  }\n\n  return response.json();\n};\n"],"mappings":"qIAAA,KAAM,CAAAA,QAAQ,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAGF,OAAO,CAACC,GAAG,CAACE,sBAAsB,CAEnF,MAAO,MAAM,CAAAC,QAAQ,CAAG,cAAAA,CAAOC,QAAQ,CAAmB,IAAjB,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACnD,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIb,QAAQ,EAAAa,MAAA,CAAGP,QAAQ,EAAAQ,aAAA,EACjDC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,EACER,OAAO,CACX,CAAC,CAEF,GAAI,CAACI,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CACnC,KAAM,IAAI,CAAAC,KAAK,CAACF,KAAK,CAACG,MAAM,EAAI,WAAW,CAAC,CAC9C,CAEA,MAAO,CAAAT,QAAQ,CAACO,IAAI,CAAC,CAAC,CACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}